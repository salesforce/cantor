{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cantor is a data serving layer: it offers persistence for a number of basic data structures on top of a variety of storage solutions (e.g., MySQL and S3). Cantor exposes an HTTP and gRPC API, and includes thin client libraries for Java and Python. Cantor allows users to persist and query data stored in one of the following forms: Fat Events - multi-dimensional time-series data points; where each data point has a timestamp along with an arbitrary list of metadata (key/value strings), a number of dimensions (double values), and a payload (arbitrary byte array). Key/value pairs (Objects) - the key is a unique string and the value is an arbitrary byte array. This is consistent with other key/value storage solutions: there are methods to create and drop namespaces, as well as methods to persist and retrieve objects. Sorted sets - each set is identified with a unique string as the set name, and a number of entries, each associated with a numerical value as the weight of the entry. Functions on sets allow users to create and drop namespaces, as well as slice and paginate sets based on the weight of the entries. These data structures can be used to solve variety of use-cases for applications; and they are straight forward to implement simply and efficiently on top of relational databases. Cantor provides this implementaion. It also tries to eliminate some of the complexities around relational databases, such as joins, constraints, and stored procedures. The aim of the library is to provide a simple and powerful set of abstractions for users to be able to spend more time on the application's business logic rather than the data storage and retrieval.","title":"Introduction"},{"location":"components/","text":"Components","title":"Components"},{"location":"components/#components","text":"","title":"Components"},{"location":"embedded/","text":"Embedded Cantor For applications that require an embedded storage solution, for example Agents that require local persistence for caching or buffering, the embedded implementation of Cantor can be used. Embedded Cantor uses H2 for the underlying storage engine. To use Cantor embedded in your application, add this dependency to the pom.xml : <dependency> <groupId>com.salesforce.cantor</groupId> <artifactId>cantor-h2</artifactId> <version>${cantor-h2.version}</version> </dependency> Here is a sample application: import com.salesforce.cantor.Cantor; import com.salesforce.cantor.h2.CantorOnH2; import java.io.IOException; class Example { public static void main(String[] args) throws IOException { String namespace = \"namespace\"; String key = \"key\"; byte[] value = \"value\".getBytes(); // create an instance of Cantor on H2 and store the database in the given path Cantor cantor = new CantorOnH2(\"/tmp/example/db\"); // create the namespace if not exists cantor.objects().create(namespace); // store an object cantor.objects().store(namespace, key, value); byte[] returned = cantor.objects().get(namespace, key); System.out.println( \"stored: \" + new String(value) + \"\\n\" + \"retrieved: \" + new String(returned) ); } }","title":"Embedded"},{"location":"embedded/#embedded-cantor","text":"For applications that require an embedded storage solution, for example Agents that require local persistence for caching or buffering, the embedded implementation of Cantor can be used. Embedded Cantor uses H2 for the underlying storage engine. To use Cantor embedded in your application, add this dependency to the pom.xml : <dependency> <groupId>com.salesforce.cantor</groupId> <artifactId>cantor-h2</artifactId> <version>${cantor-h2.version}</version> </dependency> Here is a sample application: import com.salesforce.cantor.Cantor; import com.salesforce.cantor.h2.CantorOnH2; import java.io.IOException; class Example { public static void main(String[] args) throws IOException { String namespace = \"namespace\"; String key = \"key\"; byte[] value = \"value\".getBytes(); // create an instance of Cantor on H2 and store the database in the given path Cantor cantor = new CantorOnH2(\"/tmp/example/db\"); // create the namespace if not exists cantor.objects().create(namespace); // store an object cantor.objects().store(namespace, key, value); byte[] returned = cantor.objects().get(namespace, key); System.out.println( \"stored: \" + new String(value) + \"\\n\" + \"retrieved: \" + new String(returned) ); } }","title":"Embedded Cantor"},{"location":"events/","text":"Definition Cantor Events are multi-dimensional time-series data points; where each data point has a timestamp (in milliseconds) along with some arbitrary key/value pairs as metadata (where values are strings), some arbitrary key/value pairs as dimensions (where values are doubles), and optionally a byte array payload attached to an event. An event looks like this: { \"timestampMillis\": 1616011054775, \"metadata\": { \"metadataKey1\": \"a\", \"metadataKey2\": \"b\", \"metadataKey3\": \"c\" }, \"dimensions\": { \"dimensionsKey1\": 0.1, \"dimensionsKey2\": 0.2, \"dimensionsKey3\": 0.3 }, \"payload\": \"QmFzZTY0IGVuY29kZWQ=\" } HTTP API To make HTTP calls in local testing environment, use this base URL: http://localhost:8084 . For convenience, you can use Cantor Swagger UI , which comes with your local cantor instance, to compose the full custom URL for your API calls. Full URL to each API endpoint's Swagger UI page is linked on each endpoint below. Remember to spin up your local cantor HTTP server instance before you click on any Swagger UI link on this page. Most of the Events API endpoints need required and/or optional URL parameters. Required URL parameters are shown as part of endpoint's path, while optional URL parameters, if existed, are given below. Only one endpoint (i.e. POST \u200b/api\u200b/events\u200b/{namespace} ) needs data parameters. GET /api/events Get all event namespaces. Sample Code: curl -X GET \"http://localhost:8084/api/events\" -H \"accept: application/json\" GET /api/events/{namespace} Get all events under a specific namespace. Optional URL Paramemter(s): start : integer UNIX Time. end : integer UNIX Time. metadata_query : string array There are two kinds of metadata query you can use: exact match, e.g. [\"host=localhost\"] matches only the events whose metadata value for metadata key host is exactly localhost regex match using ~ and * , e.g. [\"host=~prod-*-example\"] matches only the events whose metadata value for metadata key host starts with prod- and ends with -example dimensions_query : string array You can also use = , < , <= , >= or > as part of dimensions query, e.g. [\"cpu>=0.3\"] matches only the events whose dimension value for dimension key cpu has a value higher than or equal to 0.3 . include_payloads : boolean Defaulted to false . Responses will include the payload of the events if set to true . ascending : boolean Defaulted to true . Events returned will be sorted in ascending order if set to true and vice versa. limit : integer Defaulted to 0 , which puts no limit on the number of events returned. If specified, this parameter limits the maximum number of events returned. Sample Code: This mock HTTP call returns a list of events under namespace test-namespace between starting timestamp 1616011054000 and ending timestamp 1616011055000 , where alll values for the metadata key host starts with na4- ( [\"host=~na4-*\"] ) and alll values for the dimension key cpu is larger than or equal to 0.3 ( [\"cpu>=0.3\"] ). curl -X GET \"http://localhost:8084/api/events/test-namespace?start=1616011054000&end=1616011055000&metadata_query=host%3D~na4-%2A&dimensions_query=cpu%3C%3D0.5&ascending=true\" -H \"accept: application/json\" GET /api/events/{namespace}/metadata/{metadata} Get all existing metadata values, for an event metadata key, under a specific event namespace. Optional URL Paramemter(s): start : integer UNIX Time. end : integer UNIX Time.API metadata_query : string array There are two kinds of metadata query you can use: exact match, e.g. [\"host=localhost\"] matches only the events whose metadata value for metadata key host is exactly localhost regex match using ~ and * , e.g. [\"host=~prod-*-example\"] matches only the events whose metadata value for metadata key host starts with prod- and ends with -example dimensions_query : string array You can also use = , < , <= , >= or > as part of dimensions query, e.g. [\"cpu>=0.3\"] matches only the events whose dimension value for dimension key cpu has a value higher than or equal to 0.3 . Sample Code: This mock HTTP call returns all possible metadata values for the metadata key os under namespace test-namespace , between starting timestamp 1616011054000 and ending timestamp 1616011055000 , with the metadata query [\"host=~*-search\"] and dimensions query [\"mem<0.8\"] . curl -X GET \"http://localhost:8084/api/events/test-namespace/metadata/os?start=1616011054000&end=1616011055000&metadata_query=host%3D~%2A-search&dimensions_query=mem%3C0.8\" -H \"accept: application/json\" POST \u200b/api\u200b/events\u200b/{namespace} Add event(s) under an event namespace. Data Paramemter(s): Include events to be added, e.g. [ { \"timestampMillis\": 1616011054774, \"metadata\": { \"metadataKey1\": \"a\" }, \"payload\": \"QmFzZTY0IGVuY29kZWQ=\" }, { \"timestampMillis\": 1616011054775, \"dimensions\": { \"dimensionsKey2\": 0.5 } }, { \"timestampMillis\": 1616011054776, \"metadata\": { \"metadataKey3\": \"a\" }, \"dimensions\": { \"dimensionsKey1\": 0.1, \"dimensionsKey3\": 0.18 } } ] Sample Code: This mock HTTP call stores an event (schema defined right above) under the event namespace test-namespace . curl -X POST \"http://localhost:8084/api/events/test-namespace\" -H \"accept: */*\" -H \"Content-Type: application/json\" -d \"[{\\\"timestampMillis\\\":1616011054774,\\\"metadata\\\":{\\\"metadataKey1\\\":\\\"a\\\"},\\\"payload\\\":\\\"QmFzZTY0IGVuY29kZWQ=\\\"},{\\\"timestampMillis\\\":1616011054775,\\\"dimensions\\\":{\\\"dimensionsKey2\\\":0.5}},{\\\"timestampMillis\\\":1616011054776,\\\"metadata\\\":{\\\"metadataKey3\\\":\\\"a\\\"},\\\"dimensions\\\":{\\\"dimensionsKey1\\\":0.1,\\\"dimensionsKey3\\\":0.18}}]\" PUT /api\u200b/events\u200b/{namespace} Create an event namespace. Sample Code: This mock HTTP call adds the event namespace test-namespace . curl -X PUT \"http://localhost:8084/api/events/test-namespace\" -H \"accept: */*\" DELETE \u200b/api\u200b/events\u200b/{namespace} Drop an event namespace. Sample Code: This mock HTTP call drops the event namespace test-namespace . curl -X DELETE \"http://localhost:8084/api/events/test-namespace\" -H \"accept: */*\" DELETE /api\u200b/events\u200b/expire\u200b/{namespace}\u200b/{endTimestampMillis} Expire old events under a specific event namespace before the given timestamp. Sample Code: This mock HTTP call sets all events under the event namespace test-namespace to expire before UNIX time 1616020000 , which is March 17, 2021, at 8:43pm in UTC. curl -X DELETE \"http://localhost:8084/api/events/expire/test-namespace/1616020000\" -H \"accept: */*\" Java gRPC API To make use of Cantor's gRPC client in local testing environment, make sure you have a local cantor gRPC server instance running. namespaces() Get all event namespaces. Method Signature(s): Collection<String> namespaces() throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.events().namespace()); } } create() Create an event namespace. Method Signature(s): void create(String namespace) throws IOException Sample Code: This following code creates an event namespace dev-namespace . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.events().create(\"dev-namespace\"); } } store() Add event(s) under an event namespace. Method Signature(s): For storing a single event: void store(String namespace, Event event) throws IOException void store(String namespace, long timestampMillis, Map<String, String> metadata, Map<String, Double> dimensions) throws IOException void store(String namespace, long timestampMillis, Map<String, String> metadata, Map<String, Double> dimensions, byte[] payload) throws IOException For storing multiple events: void store(String namespace, Collection<Event> batch) throws IOException Sample Code: This following code stores a single event (with metadata, dimensions and payload) under event namespace dev-namespace . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.Collections; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); // remember to create the event namespace first cantor.events().store(\"dev-namespace\", System.currentTimeMillis(), Collections.singletonMap(\"metadataKey1\", \"testValue\"), Collections.singletonMap(\"dimensionsKey2\", 5.9), \"Hello!\".getBytes(StandardCharsets.UTF_8)); } } get() Get all events under a specific namespace. Argument(s): startTimestampMillis : Start timestamp in UNIX time. endTimestampMillis : End timestamp in UNIX time. metadataQuery : There are two kinds of metadata query you can use: exact match, e.g. Collections.singletonMap(\"host\", \"=localhost\") matches only the events whose metadata value for metadata key host is exactly localhost regex match using ~ and * , e.g. Collections.singletonMap(\"host\", \"=~prod-*-example\") matches only the events whose metadata value for metadata key host starts with prod- and ends with -example dimensionsQuery : You can also use = , < , <= , >= or > as part of dimensions query, e.g. a Collections.singletonMap(\"cpu\", >=0.3\") matches only the events whose dimension value for dimension key cpu has a value higher than or equal to 0.3 . includePayloads : Defaulted to false . Responses will include the payload of the events if set to true . ascending : Defaulted to true . Events returned will be sorted in ascending order if set to true and vice versa. limit : Defaulted to 0 , which puts no limit on the number of events returned. If specified, this parameter limits the maximum number of events returned. Method Signature(s): List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, boolean includePayloads) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery, boolean includePayloads) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery, boolean includePayloads, boolean ascending, int limit) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; \u200bimport java.io.IOException; class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.events().get(\"dev-namespace\", System.currentTimeMillis() - 60000, System.currentTimeMillis(), false)); } } metadata() Get distinct metadata values for the given metadata key for events in the given namespace, with timestamp between the startTimestampMillis and endTimestampMillis , metadata and dimensions matching the given queries( metadataQuery and dimensionsQuery ). Method Signature(s): Set<String> metadata(String namespace, String metadataKey, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b import java.util.Collections; class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.events().metadata(\"dev-namespace\", 0, System.currentTimeMillis(), Collections.singletonMap(\"metadataKey1\", \"=~test*\"), null)); } } drop() Drop an event namespace. Method Signature(s): void drop(String namespace) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.events().drop(\"dev-namespace\"); } } expire() Expire all events with timestamp before the given end timestamp. Method Signature(s): void expire(String namespace, long endTimestampMillis) Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.events().expire(\"dev-namespace\", 1616031010483); } } Use Case Any time-series data fits will as a use case for events. Keep a log of requests to your web-service, with query parameters and headers as metadata. Add response size, request latency, and number of errors as dimensions. You could even store the response body as a payload. Metadata and dimension keys do not have to be defined beforehand, so new keys can crop up at runtime without needing to change any schema or config.","title":"Events"},{"location":"events/#definition","text":"Cantor Events are multi-dimensional time-series data points; where each data point has a timestamp (in milliseconds) along with some arbitrary key/value pairs as metadata (where values are strings), some arbitrary key/value pairs as dimensions (where values are doubles), and optionally a byte array payload attached to an event. An event looks like this: { \"timestampMillis\": 1616011054775, \"metadata\": { \"metadataKey1\": \"a\", \"metadataKey2\": \"b\", \"metadataKey3\": \"c\" }, \"dimensions\": { \"dimensionsKey1\": 0.1, \"dimensionsKey2\": 0.2, \"dimensionsKey3\": 0.3 }, \"payload\": \"QmFzZTY0IGVuY29kZWQ=\" }","title":"Definition"},{"location":"events/#http-api","text":"To make HTTP calls in local testing environment, use this base URL: http://localhost:8084 . For convenience, you can use Cantor Swagger UI , which comes with your local cantor instance, to compose the full custom URL for your API calls. Full URL to each API endpoint's Swagger UI page is linked on each endpoint below. Remember to spin up your local cantor HTTP server instance before you click on any Swagger UI link on this page. Most of the Events API endpoints need required and/or optional URL parameters. Required URL parameters are shown as part of endpoint's path, while optional URL parameters, if existed, are given below. Only one endpoint (i.e. POST \u200b/api\u200b/events\u200b/{namespace} ) needs data parameters.","title":"HTTP API"},{"location":"events/#get-apievents","text":"Get all event namespaces. Sample Code: curl -X GET \"http://localhost:8084/api/events\" -H \"accept: application/json\"","title":"GET /api/events"},{"location":"events/#get-apieventsnamespace","text":"Get all events under a specific namespace. Optional URL Paramemter(s): start : integer UNIX Time. end : integer UNIX Time. metadata_query : string array There are two kinds of metadata query you can use: exact match, e.g. [\"host=localhost\"] matches only the events whose metadata value for metadata key host is exactly localhost regex match using ~ and * , e.g. [\"host=~prod-*-example\"] matches only the events whose metadata value for metadata key host starts with prod- and ends with -example dimensions_query : string array You can also use = , < , <= , >= or > as part of dimensions query, e.g. [\"cpu>=0.3\"] matches only the events whose dimension value for dimension key cpu has a value higher than or equal to 0.3 . include_payloads : boolean Defaulted to false . Responses will include the payload of the events if set to true . ascending : boolean Defaulted to true . Events returned will be sorted in ascending order if set to true and vice versa. limit : integer Defaulted to 0 , which puts no limit on the number of events returned. If specified, this parameter limits the maximum number of events returned. Sample Code: This mock HTTP call returns a list of events under namespace test-namespace between starting timestamp 1616011054000 and ending timestamp 1616011055000 , where alll values for the metadata key host starts with na4- ( [\"host=~na4-*\"] ) and alll values for the dimension key cpu is larger than or equal to 0.3 ( [\"cpu>=0.3\"] ). curl -X GET \"http://localhost:8084/api/events/test-namespace?start=1616011054000&end=1616011055000&metadata_query=host%3D~na4-%2A&dimensions_query=cpu%3C%3D0.5&ascending=true\" -H \"accept: application/json\"","title":"GET /api/events/{namespace}"},{"location":"events/#get-apieventsnamespacemetadatametadata","text":"Get all existing metadata values, for an event metadata key, under a specific event namespace. Optional URL Paramemter(s): start : integer UNIX Time. end : integer UNIX Time.API metadata_query : string array There are two kinds of metadata query you can use: exact match, e.g. [\"host=localhost\"] matches only the events whose metadata value for metadata key host is exactly localhost regex match using ~ and * , e.g. [\"host=~prod-*-example\"] matches only the events whose metadata value for metadata key host starts with prod- and ends with -example dimensions_query : string array You can also use = , < , <= , >= or > as part of dimensions query, e.g. [\"cpu>=0.3\"] matches only the events whose dimension value for dimension key cpu has a value higher than or equal to 0.3 . Sample Code: This mock HTTP call returns all possible metadata values for the metadata key os under namespace test-namespace , between starting timestamp 1616011054000 and ending timestamp 1616011055000 , with the metadata query [\"host=~*-search\"] and dimensions query [\"mem<0.8\"] . curl -X GET \"http://localhost:8084/api/events/test-namespace/metadata/os?start=1616011054000&end=1616011055000&metadata_query=host%3D~%2A-search&dimensions_query=mem%3C0.8\" -H \"accept: application/json\"","title":"GET /api/events/{namespace}/metadata/{metadata}"},{"location":"events/#post-apieventsnamespace","text":"Add event(s) under an event namespace. Data Paramemter(s): Include events to be added, e.g. [ { \"timestampMillis\": 1616011054774, \"metadata\": { \"metadataKey1\": \"a\" }, \"payload\": \"QmFzZTY0IGVuY29kZWQ=\" }, { \"timestampMillis\": 1616011054775, \"dimensions\": { \"dimensionsKey2\": 0.5 } }, { \"timestampMillis\": 1616011054776, \"metadata\": { \"metadataKey3\": \"a\" }, \"dimensions\": { \"dimensionsKey1\": 0.1, \"dimensionsKey3\": 0.18 } } ] Sample Code: This mock HTTP call stores an event (schema defined right above) under the event namespace test-namespace . curl -X POST \"http://localhost:8084/api/events/test-namespace\" -H \"accept: */*\" -H \"Content-Type: application/json\" -d \"[{\\\"timestampMillis\\\":1616011054774,\\\"metadata\\\":{\\\"metadataKey1\\\":\\\"a\\\"},\\\"payload\\\":\\\"QmFzZTY0IGVuY29kZWQ=\\\"},{\\\"timestampMillis\\\":1616011054775,\\\"dimensions\\\":{\\\"dimensionsKey2\\\":0.5}},{\\\"timestampMillis\\\":1616011054776,\\\"metadata\\\":{\\\"metadataKey3\\\":\\\"a\\\"},\\\"dimensions\\\":{\\\"dimensionsKey1\\\":0.1,\\\"dimensionsKey3\\\":0.18}}]\"","title":"POST \u200b/api\u200b/events\u200b/{namespace}"},{"location":"events/#put-apieventsnamespace","text":"Create an event namespace. Sample Code: This mock HTTP call adds the event namespace test-namespace . curl -X PUT \"http://localhost:8084/api/events/test-namespace\" -H \"accept: */*\"","title":"PUT /api\u200b/events\u200b/{namespace}"},{"location":"events/#delete-apieventsnamespace","text":"Drop an event namespace. Sample Code: This mock HTTP call drops the event namespace test-namespace . curl -X DELETE \"http://localhost:8084/api/events/test-namespace\" -H \"accept: */*\"","title":"DELETE \u200b/api\u200b/events\u200b/{namespace}"},{"location":"events/#delete-apieventsexpirenamespaceendtimestampmillis","text":"Expire old events under a specific event namespace before the given timestamp. Sample Code: This mock HTTP call sets all events under the event namespace test-namespace to expire before UNIX time 1616020000 , which is March 17, 2021, at 8:43pm in UTC. curl -X DELETE \"http://localhost:8084/api/events/expire/test-namespace/1616020000\" -H \"accept: */*\"","title":"DELETE /api\u200b/events\u200b/expire\u200b/{namespace}\u200b/{endTimestampMillis}"},{"location":"events/#java-grpc-api","text":"To make use of Cantor's gRPC client in local testing environment, make sure you have a local cantor gRPC server instance running.","title":"Java gRPC API"},{"location":"events/#namespaces","text":"Get all event namespaces. Method Signature(s): Collection<String> namespaces() throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.events().namespace()); } }","title":"namespaces()"},{"location":"events/#create","text":"Create an event namespace. Method Signature(s): void create(String namespace) throws IOException Sample Code: This following code creates an event namespace dev-namespace . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.events().create(\"dev-namespace\"); } }","title":"create()"},{"location":"events/#store","text":"Add event(s) under an event namespace. Method Signature(s): For storing a single event: void store(String namespace, Event event) throws IOException void store(String namespace, long timestampMillis, Map<String, String> metadata, Map<String, Double> dimensions) throws IOException void store(String namespace, long timestampMillis, Map<String, String> metadata, Map<String, Double> dimensions, byte[] payload) throws IOException For storing multiple events: void store(String namespace, Collection<Event> batch) throws IOException Sample Code: This following code stores a single event (with metadata, dimensions and payload) under event namespace dev-namespace . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.Collections; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); // remember to create the event namespace first cantor.events().store(\"dev-namespace\", System.currentTimeMillis(), Collections.singletonMap(\"metadataKey1\", \"testValue\"), Collections.singletonMap(\"dimensionsKey2\", 5.9), \"Hello!\".getBytes(StandardCharsets.UTF_8)); } }","title":"store()"},{"location":"events/#get","text":"Get all events under a specific namespace. Argument(s): startTimestampMillis : Start timestamp in UNIX time. endTimestampMillis : End timestamp in UNIX time. metadataQuery : There are two kinds of metadata query you can use: exact match, e.g. Collections.singletonMap(\"host\", \"=localhost\") matches only the events whose metadata value for metadata key host is exactly localhost regex match using ~ and * , e.g. Collections.singletonMap(\"host\", \"=~prod-*-example\") matches only the events whose metadata value for metadata key host starts with prod- and ends with -example dimensionsQuery : You can also use = , < , <= , >= or > as part of dimensions query, e.g. a Collections.singletonMap(\"cpu\", >=0.3\") matches only the events whose dimension value for dimension key cpu has a value higher than or equal to 0.3 . includePayloads : Defaulted to false . Responses will include the payload of the events if set to true . ascending : Defaulted to true . Events returned will be sorted in ascending order if set to true and vice versa. limit : Defaulted to 0 , which puts no limit on the number of events returned. If specified, this parameter limits the maximum number of events returned. Method Signature(s): List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, boolean includePayloads) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery, boolean includePayloads) throws IOException List<Event> get(String namespace, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery, boolean includePayloads, boolean ascending, int limit) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; \u200bimport java.io.IOException; class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.events().get(\"dev-namespace\", System.currentTimeMillis() - 60000, System.currentTimeMillis(), false)); } }","title":"get()"},{"location":"events/#metadata","text":"Get distinct metadata values for the given metadata key for events in the given namespace, with timestamp between the startTimestampMillis and endTimestampMillis , metadata and dimensions matching the given queries( metadataQuery and dimensionsQuery ). Method Signature(s): Set<String> metadata(String namespace, String metadataKey, long startTimestampMillis, long endTimestampMillis, Map<String, String> metadataQuery, Map<String, String> dimensionsQuery) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b import java.util.Collections; class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.events().metadata(\"dev-namespace\", 0, System.currentTimeMillis(), Collections.singletonMap(\"metadataKey1\", \"=~test*\"), null)); } }","title":"metadata()"},{"location":"events/#drop","text":"Drop an event namespace. Method Signature(s): void drop(String namespace) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.events().drop(\"dev-namespace\"); } }","title":"drop()"},{"location":"events/#expire","text":"Expire all events with timestamp before the given end timestamp. Method Signature(s): void expire(String namespace, long endTimestampMillis) Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.events().expire(\"dev-namespace\", 1616031010483); } }","title":"expire()"},{"location":"events/#use-case","text":"Any time-series data fits will as a use case for events. Keep a log of requests to your web-service, with query parameters and headers as metadata. Add response size, request latency, and number of errors as dimensions. You could even store the response body as a payload. Metadata and dimension keys do not have to be defined beforehand, so new keys can crop up at runtime without needing to change any schema or config.","title":"Use Case"},{"location":"h2/","text":"H2 Implementation","title":"H2 Implementation"},{"location":"h2/#h2-implementation","text":"","title":"H2 Implementation"},{"location":"license/","text":"License Copyright (c) 2020, Salesforce.com, Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"license/#license","text":"Copyright (c) 2020, Salesforce.com, Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"motivations/","text":"Majority of applications require some form of persistence. The data access object layer implementation usually accounts for a considerable portion of the code in these applications. This layer usually contains code to initalize and connect to some storage system; a mapping to/from the layout of the data in storage and the corresponding representation in the application; and also, composing and executing queries against the storage, handling edge cases, handling exceptions, etc. This is where Cantor can help to reduce the code and its complexity. Some of the commonly used patterns to access data are: Store and retrieve single objects; for example, storing user informations. The data stored is usually relatively small, it can be a JSON object, or a serialized protobuf object, or any other form of data that can be converted to a byte array. Key/value storages such as BerkeleyDB or Redis are usually used for this purpose. Store and retrieve collections of data; for example, list of users in a certain group. Relational databases or indexing engines are usually used for this purpose. Store and retireve temporal data points; for example, metric values, or IoT events. Time-series databases such as Elastic Search, InfluxDB, OpenTSDB, or Prometheus are used for this purpose. Cantor tries to provide a set of simple yet powerful abstractions that can be used to address essential needs for the above mentioned use cases. The implementation focues more on simplicity and usability than completeness, performance, or scale. This is not a suitable solution for large scale (data sets larger than few tera-bytes) applications. It is also not recommended for high throughput (more than a hundred thousand operations per second) applications.","title":"Motivations"},{"location":"mysql/","text":"Cantor On MySQL","title":"Cantor On MySQL"},{"location":"mysql/#cantor-on-mysql","text":"","title":"Cantor On MySQL"},{"location":"namespaces/","text":"There are four main interfaces exposed for users to interact with: the Events interface for timeseries data; the Objects interface for key/value pairs; the Sets interface for persisted sorted sets. All methods expect a namespace parameter which can be used to slice data into multiple physically separate databases. A namespace must be first created by making a call to the create(namespace) method. It is also possible to drop the whole namespace by calling drop(namespace) after which point any call to that namespace will result in IOException.","title":"Namespaces"},{"location":"objects/","text":"Definition The Objects interface defines key/value pairs. An object has a key, which is a unique string in the namespace, and a value, which is arbitrary byte arrays. An object looks like this: { \"obj1\": \"QmFzZTY0IGVuY29kZWQ=\" } HTTP API To make HTTP calls in local testing environment, use this base URL: http://localhost:8084 . For convenience, you can use Cantor Swagger UI , which comes with your local cantor instance, to compose the full custom URL for your API calls. Full URL to each API endpoint's Swagger UI page is linked on each endpoint below. Remember to spin up your local cantor HTTP server instance before you click on any Swagger UI link on this page. Most of the Objects API endpoints need required and/or optional URL parameters. Required URL parameters are shown as part of endpoint's path, while optional URL parameters, if existed, are given below. Only one endpoint (i.e. PUT /api\u200b/objects\u200b/{namespace}\u200b/{key} ) needs data parameters. GET /api/objects Get all object namespaces. Sample Code: curl -X GET \"http://localhost:8084/api/objects\" -H \"accept: application/json\" GET \u200b/api\u200b/objects\u200b/{namespace}\u200b/{key} Get an object's content by its key. Sample Code: This HTTP call returns the object data for key iebdj1s under namespace dev . curl -X GET \"http://localhost:8084/api/objects/dev/iebdj1s\" -H \"accept: application/json\" GET \u200b/api\u200b/objects\u200b/size\u200b/{namespace} View size of a namespace. Sample Code: This HTTP call returns the size of the namespace dev . curl -X GET \"http://localhost:8084/api/objects/size/dev\" -H \"accept: application/json\" GET /api\u200b/objects\u200b/keys\u200b/{namespace} Get the keys of objects in a namespace. Optional URL Paramemter(s): start : integer Start offset. count : integer Maximum number of key entries to return. Sample Code: This HTTP call returns the first 20 keys of the namespace dev . curl -X GET \"http://localhost:8084/api/objects/keys/dev?start=0&count=20\" -H \"accept: application/json\" PUT /api\u200b/objects\u200b/{namespace} Create a new object namespace. Sample Code: This HTTP call creates the namespace dev . curl -X PUT \"http://localhost:8084/api/objects/dev\" -H \"accept: */*\" PUT /api\u200b/objects\u200b/{namespace}\u200b/{key} Add or overwrite an object in a namespace. Sample Code: This HTTP call adds or overwrite the object with key obj1 under namespace dev with the value QmFzZTY0IGVuY29kZWQ= . curl -X PUT \"http://localhost:8084/api/objects/dev/obj1\" -H \"accept: */*\" -H \"Content-Type: text/plain\" -d \"[\\\"QmFzZTY0IGVuY29kZWQ=\\\"]\" DELETE \u200b/api\u200b/objects\u200b/{namespace} Drop an object namespace. Sample Code: This HTTP call drops the namespace dev . curl -X DELETE \"http://localhost:8084/api/objects/dev\" -H \"accept: */*\" DELETE \u200b/api\u200b/objects\u200b/{namespace}\u200b/{key} Delete an object by its key. Sample Code: This HTTP call deletes the object with key obj1 under the namespace dev . curl -X DELETE \"http://localhost:8084/api/objects/dev/obj1\" -H \"accept: application/json\" Java gRPC API namespaces() Get all object namespaces. Method Signature(s): Collection<String> namespaces() throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects().namespace()); } } create() Create an object namespace. Method Signature(s): void create(String namespace) throws IOException Sample Code: The following code creates an object namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.objects().create(\"dev\"); } } drop() Drop an object namespace. Method Signature(s): void drop(String namespace) throws IOException Sample Code: The following code drops an object namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.objects().drop(\"dev\"); } } keys() Returns paginated list of key entries in a namespace; the returned list is not ordered. Argument(s): start : Start offset. count : Maximum number of key entries to return; -1 for infinite entries. Method Signature(s): Collection<String> keys(String namespace, int start, int count) throws IOException Sample Code: The following code prints the first 20 object keys under the namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects().keys(\"dev\", 0, 20)); } } store() Add or overwrite an object in a namespace. Method Signature(s): For storing a single object: void store(String namespace, String key, byte[] bytes) throws IOException For storing multiple objects: void store(String namespace, Map<String, byte[]> batch) throws IOException Sample Code: The following code adds or overwrite the object with key obj1 under namespace dev with the byte array derived from string object data . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.Collections; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.objects.store(\"dev\", Collections.singletonMap(\"obj1\", \"object data\".getBytes(StandardCharsets.UTF_8))); } } get() Get an object's content by its key. Method Signature(s): byte[] get(String namespace, String key) throws IOException Returns bytes associated to the given key. Map<String, byte[]> get(String namespace, Collection<String> keys) throws IOException Returns batch of key/values for the list of key entries. Sample Code: The following code retrieve the content of object with key obj1 under namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects.get(\"dev\", \"obj1\")); } } delete() Delete object(s) by key(s). Method Signature(s): boolean delete(String namespace, String key) throws IOException Delete the object; return true if object was found and removed successfully, false otherwise. void delete(String namespace, Collection<String> keys) throws IOException Delete batch of objects. Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects.delete(\"dev\", \"obj1\")); } } size() Returns number of key/value pairs in the given namespace. Method Signature(s): int size(String namespace) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects.size(\"dev\")); } } Use Case Use cases for the objects are effectively endless, storing key/value pairs is extremely common. Since values are arbitrary byte arrays, any content can be stored and retrieved using objects. Combining objects and sets can provide a large amount of utility, without spending a lot of time writing storage code. For example, create a set for the script name \u201cemail_admins.sh\u201d with entries for each version, then store the script versions in objects.","title":"Objects"},{"location":"objects/#definition","text":"The Objects interface defines key/value pairs. An object has a key, which is a unique string in the namespace, and a value, which is arbitrary byte arrays. An object looks like this: { \"obj1\": \"QmFzZTY0IGVuY29kZWQ=\" }","title":"Definition"},{"location":"objects/#http-api","text":"To make HTTP calls in local testing environment, use this base URL: http://localhost:8084 . For convenience, you can use Cantor Swagger UI , which comes with your local cantor instance, to compose the full custom URL for your API calls. Full URL to each API endpoint's Swagger UI page is linked on each endpoint below. Remember to spin up your local cantor HTTP server instance before you click on any Swagger UI link on this page. Most of the Objects API endpoints need required and/or optional URL parameters. Required URL parameters are shown as part of endpoint's path, while optional URL parameters, if existed, are given below. Only one endpoint (i.e. PUT /api\u200b/objects\u200b/{namespace}\u200b/{key} ) needs data parameters.","title":"HTTP API"},{"location":"objects/#get-apiobjects","text":"Get all object namespaces. Sample Code: curl -X GET \"http://localhost:8084/api/objects\" -H \"accept: application/json\"","title":"GET /api/objects"},{"location":"objects/#get-apiobjectsnamespacekey","text":"Get an object's content by its key. Sample Code: This HTTP call returns the object data for key iebdj1s under namespace dev . curl -X GET \"http://localhost:8084/api/objects/dev/iebdj1s\" -H \"accept: application/json\"","title":"GET \u200b/api\u200b/objects\u200b/{namespace}\u200b/{key}"},{"location":"objects/#get-apiobjectssizenamespace","text":"View size of a namespace. Sample Code: This HTTP call returns the size of the namespace dev . curl -X GET \"http://localhost:8084/api/objects/size/dev\" -H \"accept: application/json\"","title":"GET \u200b/api\u200b/objects\u200b/size\u200b/{namespace}"},{"location":"objects/#get-apiobjectskeysnamespace","text":"Get the keys of objects in a namespace. Optional URL Paramemter(s): start : integer Start offset. count : integer Maximum number of key entries to return. Sample Code: This HTTP call returns the first 20 keys of the namespace dev . curl -X GET \"http://localhost:8084/api/objects/keys/dev?start=0&count=20\" -H \"accept: application/json\"","title":"GET /api\u200b/objects\u200b/keys\u200b/{namespace}"},{"location":"objects/#put-apiobjectsnamespace","text":"Create a new object namespace. Sample Code: This HTTP call creates the namespace dev . curl -X PUT \"http://localhost:8084/api/objects/dev\" -H \"accept: */*\"","title":"PUT /api\u200b/objects\u200b/{namespace}"},{"location":"objects/#put-apiobjectsnamespacekey","text":"Add or overwrite an object in a namespace. Sample Code: This HTTP call adds or overwrite the object with key obj1 under namespace dev with the value QmFzZTY0IGVuY29kZWQ= . curl -X PUT \"http://localhost:8084/api/objects/dev/obj1\" -H \"accept: */*\" -H \"Content-Type: text/plain\" -d \"[\\\"QmFzZTY0IGVuY29kZWQ=\\\"]\"","title":"PUT /api\u200b/objects\u200b/{namespace}\u200b/{key}"},{"location":"objects/#delete-apiobjectsnamespace","text":"Drop an object namespace. Sample Code: This HTTP call drops the namespace dev . curl -X DELETE \"http://localhost:8084/api/objects/dev\" -H \"accept: */*\"","title":"DELETE \u200b/api\u200b/objects\u200b/{namespace}"},{"location":"objects/#delete-apiobjectsnamespacekey","text":"Delete an object by its key. Sample Code: This HTTP call deletes the object with key obj1 under the namespace dev . curl -X DELETE \"http://localhost:8084/api/objects/dev/obj1\" -H \"accept: application/json\"","title":"DELETE \u200b/api\u200b/objects\u200b/{namespace}\u200b/{key}"},{"location":"objects/#java-grpc-api","text":"","title":"Java gRPC API"},{"location":"objects/#namespaces","text":"Get all object namespaces. Method Signature(s): Collection<String> namespaces() throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects().namespace()); } }","title":"namespaces()"},{"location":"objects/#create","text":"Create an object namespace. Method Signature(s): void create(String namespace) throws IOException Sample Code: The following code creates an object namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.objects().create(\"dev\"); } }","title":"create()"},{"location":"objects/#drop","text":"Drop an object namespace. Method Signature(s): void drop(String namespace) throws IOException Sample Code: The following code drops an object namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException;\u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.objects().drop(\"dev\"); } }","title":"drop()"},{"location":"objects/#keys","text":"Returns paginated list of key entries in a namespace; the returned list is not ordered. Argument(s): start : Start offset. count : Maximum number of key entries to return; -1 for infinite entries. Method Signature(s): Collection<String> keys(String namespace, int start, int count) throws IOException Sample Code: The following code prints the first 20 object keys under the namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects().keys(\"dev\", 0, 20)); } }","title":"keys()"},{"location":"objects/#store","text":"Add or overwrite an object in a namespace. Method Signature(s): For storing a single object: void store(String namespace, String key, byte[] bytes) throws IOException For storing multiple objects: void store(String namespace, Map<String, byte[]> batch) throws IOException Sample Code: The following code adds or overwrite the object with key obj1 under namespace dev with the byte array derived from string object data . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.Collections; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); cantor.objects.store(\"dev\", Collections.singletonMap(\"obj1\", \"object data\".getBytes(StandardCharsets.UTF_8))); } }","title":"store()"},{"location":"objects/#get","text":"Get an object's content by its key. Method Signature(s): byte[] get(String namespace, String key) throws IOException Returns bytes associated to the given key. Map<String, byte[]> get(String namespace, Collection<String> keys) throws IOException Returns batch of key/values for the list of key entries. Sample Code: The following code retrieve the content of object with key obj1 under namespace dev . import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects.get(\"dev\", \"obj1\")); } }","title":"get()"},{"location":"objects/#delete","text":"Delete object(s) by key(s). Method Signature(s): boolean delete(String namespace, String key) throws IOException Delete the object; return true if object was found and removed successfully, false otherwise. void delete(String namespace, Collection<String> keys) throws IOException Delete batch of objects. Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects.delete(\"dev\", \"obj1\")); } }","title":"delete()"},{"location":"objects/#size","text":"Returns number of key/value pairs in the given namespace. Method Signature(s): int size(String namespace) throws IOException Sample Code: import com.salesforce.cantor.grpc.CantorOnGrpc; import java.io.IOException; \u200b class Scratch { public static void main(String[] args) throws IOException { CantorOnGrpc cantor = new CantorOnGrpc(\"localhost:7443\"); System.out.println(cantor.objects.size(\"dev\")); } }","title":"size()"},{"location":"objects/#use-case","text":"Use cases for the objects are effectively endless, storing key/value pairs is extremely common. Since values are arbitrary byte arrays, any content can be stored and retrieved using objects. Combining objects and sets can provide a large amount of utility, without spending a lot of time writing storage code. For example, create a set for the script name \u201cemail_admins.sh\u201d with entries for each version, then store the script versions in objects.","title":"Use Case"},{"location":"server/","text":"Cantor Server","title":"Cantor Server"},{"location":"server/#cantor-server","text":"","title":"Cantor Server"},{"location":"sets/","text":"Definition The Sets interface defines a series of actions surrounding sorted sets of strings. Each set is identified with a unique string as the set name, and a number of string entries, each associated with a numerical value as the weight of the entry. Functions on sets allow users to create and drop namespaces, as well as slice and paginate sets based on the weight of the entries. A set looks like this: { \"set1\": { \"entry1\": 0, \"entry2\": 5, \"entry3\": 10 } } HTTP API To make HTTP calls in local testing environment, use this base URL: http://localhost:8084 . For convenience, you can use Cantor Swagger UI , which comes with your local cantor instance, to compose the full custom URL for your API calls. Full URL to each API endpoint's Swagger UI page is linked on each endpoint below. Remember to spin up your local cantor HTTP server instance before you click on any Swagger UI link on this page. Most of the Sets API endpoints need required and/or optional URL parameters. Required URL parameters are shown as part of endpoint's path, while optional URL parameters, if existed, are given below. GET \u200b/api\u200b/sets Get all set namespaces. Sample Code: curl -X GET \"http://localhost:8084/api/sets\" -H \"accept: application/json\" GET \u200b/api\u200b/sets\u200b/{namespace} Get list of all sets in a namespace. Sample Code: This HTTP call returns all sets in the namespace dev . curl -X GET \"http://localhost:8084/api/sets/dev\" -H \"accept: application/json\" GET /api\u200b/sets\u200b/{namespace}\u200b/{set} Get entries from a set. Optional URL Paramemter(s): min : integer Minimum weight for an entry. max : integer Maximum weight for an entry. start : integer Index from which to start counting. count : integer Number of entries allowed in response. asc : boolean Return in ascending or descending format. Sample Code: This HTTP call returns the top 10 entries with the lightest weights from the set set1 under the namespace dev , with weights ranging from 1 to 100. curl -X GET \"http://localhost:8084/api/sets/dev/set1?min=1&max=100&start=0&count=10&asc=true\" -H \"accept: application/json\" GET \u200b/api\u200b/sets\u200b/size\u200b/{namespace}\u200b/{set} Get number of entries in a set. Sample Code: This HTTP call returns the number of the entries in the set set1 under the namespace dev . curl -X GET \"http://localhost:8084/api/sets/size/dev/set1\" -H \"accept: application/json\" GET /api\u200b/sets\u200b/entries\u200b/{namespace}\u200b/{set} Get entry names from a set. Optional URL Paramemter(s): min : integer Minimum weight for an entry. max : integer Maximum weight for an entry. start : integer Index from which to start counting. count : integer Number of entries allowed in response. asc : boolean Return in ascending or descending format. Sample Code: This HTTP call returns the names of the top 10 entries with the lightest weights from the set set1 under the namespace dev , with weights ranging from 1 to 100. curl -X GET \"http://localhost:8084/api/sets/entries/dev/set1?min=1&max=100&start=0&count=10&asc=true\" -H \"accept: application/json\" GET /api\u200b/sets\u200b/weight\u200b/{namespace}\u200b/{set}\u200b/{entry} Get weight of a specific entry in a set. Sample Code: This HTTP call returns the weight for the entry entry1 in the set set1 under the namespace dev . curl -X GET \"http://localhost:8084/api/sets/weight/dev/set1/entry1\" -H \"accept: application/json\" GET /api\u200b/sets\u200b/union\u200b/{namespace} Perform a union of all provided sets. Optional URL Paramemter(s): set : array[string] List of sets. min : integer Minimum weight for an entry. max : integer Maximum weight for an entry. start : integer Index from which to start counting. count : integer Number of entries allowed in response. asc : boolean Return in ascending or descending format. Sample Code: GET /api\u200b/sets\u200b/intersect\u200b/{namespace} Perform an intersection of all provided sets. Sample Code: POST \u200b/api\u200b/sets\u200b/{namespace}\u200b/{set}\u200b/{entry}\u200b/{count} Atomically increment the weight of an entry and return the value after increment. Sample Code: PUT /api\u200b/sets\u200b/{namespace} Create a new set namespace. Sample Code: PUT \u200b/api\u200b/sets\u200b/{namespace}\u200b/{set}\u200b/{entry}\u200b/{weight} Add or overwrite an entry in a set. Sample Code: DELETE \u200b/api\u200b/sets\u200b/{namespace} Drop a set namespace. Sample Code: DELETE /api\u200b/sets\u200b/{namespace}\u200b/{set} Delete entries in a set between provided weights. Sample Code: DELETE /api\u200b/sets\u200b/pop\u200b/{namespace}\u200b/{set} Pop entries from a set. Sample Code: DELETE \u200b/api\u200b/sets\u200b/{namespace}\u200b/{set}\u200b/{entry} Delete a specific entry by name. Sample Code: Java gRPC API Use case Sets are commonly used to store relationships and memberships of corresponding stored values. Set names can be the names of the membership groups (\u201cadmins\u201d or \u201cusers\u201d), and the entries can be user ids or email addresses, with weight being the timestamp of when they were added to the group. Another common use case is using the set as a work queue, the set name corresponding to the name of the job (\u201ccustomer-report\u201d or \u201cdata-compaction\u201d) and the entries can be ids for the job. Using the pop(...) method allows atomically retrieving an id, ensuring the corresponding job is only run once.","title":"Sets"},{"location":"sets/#definition","text":"The Sets interface defines a series of actions surrounding sorted sets of strings. Each set is identified with a unique string as the set name, and a number of string entries, each associated with a numerical value as the weight of the entry. Functions on sets allow users to create and drop namespaces, as well as slice and paginate sets based on the weight of the entries. A set looks like this: { \"set1\": { \"entry1\": 0, \"entry2\": 5, \"entry3\": 10 } }","title":"Definition"},{"location":"sets/#http-api","text":"To make HTTP calls in local testing environment, use this base URL: http://localhost:8084 . For convenience, you can use Cantor Swagger UI , which comes with your local cantor instance, to compose the full custom URL for your API calls. Full URL to each API endpoint's Swagger UI page is linked on each endpoint below. Remember to spin up your local cantor HTTP server instance before you click on any Swagger UI link on this page. Most of the Sets API endpoints need required and/or optional URL parameters. Required URL parameters are shown as part of endpoint's path, while optional URL parameters, if existed, are given below.","title":"HTTP API"},{"location":"sets/#get-apisets","text":"Get all set namespaces. Sample Code: curl -X GET \"http://localhost:8084/api/sets\" -H \"accept: application/json\"","title":"GET \u200b/api\u200b/sets"},{"location":"sets/#get-apisetsnamespace","text":"Get list of all sets in a namespace. Sample Code: This HTTP call returns all sets in the namespace dev . curl -X GET \"http://localhost:8084/api/sets/dev\" -H \"accept: application/json\"","title":"GET \u200b/api\u200b/sets\u200b/{namespace}"},{"location":"sets/#get-apisetsnamespaceset","text":"Get entries from a set. Optional URL Paramemter(s): min : integer Minimum weight for an entry. max : integer Maximum weight for an entry. start : integer Index from which to start counting. count : integer Number of entries allowed in response. asc : boolean Return in ascending or descending format. Sample Code: This HTTP call returns the top 10 entries with the lightest weights from the set set1 under the namespace dev , with weights ranging from 1 to 100. curl -X GET \"http://localhost:8084/api/sets/dev/set1?min=1&max=100&start=0&count=10&asc=true\" -H \"accept: application/json\"","title":"GET /api\u200b/sets\u200b/{namespace}\u200b/{set}"},{"location":"sets/#get-apisetssizenamespaceset","text":"Get number of entries in a set. Sample Code: This HTTP call returns the number of the entries in the set set1 under the namespace dev . curl -X GET \"http://localhost:8084/api/sets/size/dev/set1\" -H \"accept: application/json\"","title":"GET \u200b/api\u200b/sets\u200b/size\u200b/{namespace}\u200b/{set}"},{"location":"sets/#get-apisetsentriesnamespaceset","text":"Get entry names from a set. Optional URL Paramemter(s): min : integer Minimum weight for an entry. max : integer Maximum weight for an entry. start : integer Index from which to start counting. count : integer Number of entries allowed in response. asc : boolean Return in ascending or descending format. Sample Code: This HTTP call returns the names of the top 10 entries with the lightest weights from the set set1 under the namespace dev , with weights ranging from 1 to 100. curl -X GET \"http://localhost:8084/api/sets/entries/dev/set1?min=1&max=100&start=0&count=10&asc=true\" -H \"accept: application/json\"","title":"GET /api\u200b/sets\u200b/entries\u200b/{namespace}\u200b/{set}"},{"location":"sets/#get-apisetsweightnamespacesetentry","text":"Get weight of a specific entry in a set. Sample Code: This HTTP call returns the weight for the entry entry1 in the set set1 under the namespace dev . curl -X GET \"http://localhost:8084/api/sets/weight/dev/set1/entry1\" -H \"accept: application/json\"","title":"GET /api\u200b/sets\u200b/weight\u200b/{namespace}\u200b/{set}\u200b/{entry}"},{"location":"sets/#get-apisetsunionnamespace","text":"Perform a union of all provided sets. Optional URL Paramemter(s): set : array[string] List of sets. min : integer Minimum weight for an entry. max : integer Maximum weight for an entry. start : integer Index from which to start counting. count : integer Number of entries allowed in response. asc : boolean Return in ascending or descending format. Sample Code:","title":"GET /api\u200b/sets\u200b/union\u200b/{namespace}"},{"location":"sets/#get-apisetsintersectnamespace","text":"Perform an intersection of all provided sets. Sample Code:","title":"GET /api\u200b/sets\u200b/intersect\u200b/{namespace}"},{"location":"sets/#post-apisetsnamespacesetentrycount","text":"Atomically increment the weight of an entry and return the value after increment. Sample Code:","title":"POST \u200b/api\u200b/sets\u200b/{namespace}\u200b/{set}\u200b/{entry}\u200b/{count}"},{"location":"sets/#put-apisetsnamespace","text":"Create a new set namespace. Sample Code:","title":"PUT /api\u200b/sets\u200b/{namespace}"},{"location":"sets/#put-apisetsnamespacesetentryweight","text":"Add or overwrite an entry in a set. Sample Code:","title":"PUT \u200b/api\u200b/sets\u200b/{namespace}\u200b/{set}\u200b/{entry}\u200b/{weight}"},{"location":"sets/#delete-apisetsnamespace","text":"Drop a set namespace. Sample Code:","title":"DELETE \u200b/api\u200b/sets\u200b/{namespace}"},{"location":"sets/#delete-apisetsnamespaceset","text":"Delete entries in a set between provided weights. Sample Code:","title":"DELETE /api\u200b/sets\u200b/{namespace}\u200b/{set}"},{"location":"sets/#delete-apisetspopnamespaceset","text":"Pop entries from a set. Sample Code:","title":"DELETE /api\u200b/sets\u200b/pop\u200b/{namespace}\u200b/{set}"},{"location":"sets/#delete-apisetsnamespacesetentry","text":"Delete a specific entry by name. Sample Code:","title":"DELETE \u200b/api\u200b/sets\u200b/{namespace}\u200b/{set}\u200b/{entry}"},{"location":"sets/#java-grpc-api","text":"","title":"Java gRPC API"},{"location":"sets/#use-case","text":"Sets are commonly used to store relationships and memberships of corresponding stored values. Set names can be the names of the membership groups (\u201cadmins\u201d or \u201cusers\u201d), and the entries can be user ids or email addresses, with weight being the timestamp of when they were added to the group. Another common use case is using the set as a work queue, the set name corresponding to the name of the job (\u201ccustomer-report\u201d or \u201cdata-compaction\u201d) and the entries can be ids for the job. Using the pop(...) method allows atomically retrieving an id, ensuring the corresponding job is only run once.","title":"Use case"}]}